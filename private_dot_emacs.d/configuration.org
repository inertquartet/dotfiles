+TITLE: Emacs Configuration
#+AUTHOR: Chad McAuley
#+EMAIL: chad.mcauley@outlook.com
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

I'm using =use-package= to install and configure my packages. Since I want to install =use-package= ASAP when I launch Emacs for the first time on a new system, my =init.el= contains the initial setup for =package.el= and ensures that =use-package= is installed.

This makes sure =use-package= will be installed if it's not already present, and that I should be able to open Emacs for the first time on a new machine and have my whole environment automatically installed.

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

Always compile packages, and prefer the latest version

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

* Use =sensible-defaults=

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
(load-file "~/code/sensible-defaults.el/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
#+END_SRC

* Set Personal Information
** Who am I?

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Chad McAuley")
  (setq user-mail-address "chad.mcauley@outlook.com")

#+END_SRC

* Utility Functions

Define a whole mess of handy utility functions

** Change task state when clocking in

#+BEGIN_SRC emacs-lisp
(defun wp/clock-in-to-working (kw)
  "Switch task from TODO to WORKING when clocking on.
Skips capture tasks and tasks with subtasks"
  (when (and (not (and (boundp 'org-capture-mode) org-capture-mode))
             (member kw vm/todo-list))
    "WORKING"))

#+END_SRC

** Tag management

#+BEGIN_SRC emacs-lisp
(defun wp--org-swap-tags (tags)
  "Replace any tags on the current headline with TAGS.

Assumption: TAGS will be a string conforming ot Org-Mode's
tag format specification, or nil to remove all tags."
  (let ((old-tags (org-get-tags-string))
        (tags (if tags
	          (concat " " tags)
		"")))
    (save-excursion
      (beginning-of-line)
      (re-search-forward
       (concat "[ \t]*" (regexp-quote old-tags) "[ \t*$")
       (line-end-position) t)
      (replace-match tags)
      (org-set-tags-command t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun wp-org-set-tags (tag)
  "Add TAG if it is not in the list of tags, remove it otherwise.

TAG is chosen interactively from the global tags completion table."
  (interactive
   (list (let ((org-last-tags-completion-table
                (if (derived-mode-p 'org-mode)
                    (org-uniquify
                     (delq nil (append (org-get-buffer-tags)
                                       (org-global-tags-completion-table))))
                  (org-global-tags-completion-table))))
           (org-icompleting-read
            "Tag: " 'org-tags-completion-function nil nil nil
            'org-tags-history))))
  (let* ((cur-list (org-get-tags))
         (new-tags (mapconcat 'identity
                              (if (member tag cur-list)
                                  (delete tag cur-list)
                                (append cur-list (list tag)))
                              ":"))
         (new (if (> (length new-tags) 1) (concat " :" new-tags ":")
                nil)))
    (wp--org-swap-tags new)))
#+END_SRC

** Custom ID management
#+BEGIN_SRC emacs-lisp
(defun wp--org-global-custom-ids ()
  "Find custom ID fields in all org agenda files."
  (let ((files (org-agenda-files))
        file
        wp-all-org-custom-ids)
    (while (setq file (pop files))
      (with-current-buffer (org-get-agenda-file-buffer file)
        (save-excursion
          (save-restriction
            (widen)
            (goto-char (point-min))
            (while (re-search-forward "^[ \t]*:CUSTOM_ID:[ \t]+\\(\\S-+\\)[ \t]*$"
                                      nil t)
              (add-to-list 'wp-all-org-custom-ids
                           `(,(match-string-no-properties 1)
                             ,(list file (line-number-at-pos)))))))))
    wp-all-org-custom-ids))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun wp--org-find-custom-id (custom-id)
  "Return the location of CUSTOM-ID."
  (let* ((all-custom-ids (wp--org-global-custom-ids)))
    (let* ((id-parts (cadr (assoc custom-id all-custom-ids)))
           (file (car id-parts))
           (line (cadr id-parts)))
      (with-current-buffer (org-get-agenda-file-buffer file)
        (goto-char (point-min))
        (forward-line line)
        (org-reveal)
        (org-up-element)
        (list (current-buffer) (point))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun wp-org-goto-custom-id (&optional split)
  "Go to the location of a custom ID read interactively, maybe in a SPLIT."
  (interactive "P")
  (let* ((all-custom-ids (wp-org-global-custom-ids))
         (custom-id (completing-read
                     "Custom ID: "
                     all-custom-ids))
         (id-location (wp-org-find-custom-id custom-id)))
    (when id-location
      (let* ((buf (car id-location))
             (loc (cadr id-location)))
        (pop-to-buffer buf (if split t nil))
        (goto-char loc)
        (org-reveal)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun wp-org-insert-custom-id-link ()
  "Insert an Org link to a custom ID selected interactively."
  (interactive)
  (let* ((all-custom-ids (wp--org-global-custom-ids))
         (custom-id (completing-read
                     "Custom ID: "
                     all-custom-ids)))
    (when custom-id
      (let* ((id-parts (cadr (assoc custom-id all-custom-ids)))
             (file (car id-parts))
             (line (cadr id-parts)))
        (org-insert-link nil (concat file "::#" custom-id) custom-id)))))
#+END_SRC

** Insert =org-journal= entry via capture template

#+BEGIN_SRC emacs-lisp
(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))
#+END_SRC

** Shutdown emacs daemon gracefully
#+BEGIN_SRC emacs-lisp
(defun client-save-kill-emacs(&optional display)
  " This is a function that can by used to shutdown save buffers and
shutdown the emacs daemon. It should be called using
emacsclient -e '(client-save-kill-emacs)'.  This function will
check to see if there are any modified buffers or active clients
or frame.  If so an x window will be opened and the user will
be prompted."

  (let (new-frame modified-buffers active-clients-or-frames)

    ; Check if there are modified buffers or active clients or frames.
    (setq modified-buffers (modified-buffers-exist))
    (setq active-clients-or-frames ( or (> (length server-clients) 1)
					(> (length (frame-list)) 1)
				       ))

    ; Create a new frame if prompts are needed.
    (when (or modified-buffers active-clients-or-frames)
      (when (not (eq window-system 'x))
	(message "Initializing x windows system.")
	(x-initialize-window-system))
      (when (not display) (setq display (getenv "DISPLAY")))
      (message "Opening frame on display: %s" display)
      (select-frame (make-frame-on-display display '((window-system . x)))))

    ; Save the current frame.
    (setq new-frame (selected-frame))


    ; When displaying the number of clients and frames:
    ; subtract 1 from the clients for this client.
    ; subtract 2 from the frames this frame (that we just created) and the default frame.
    (when ( or (not active-clients-or-frames)
	       (yes-or-no-p (format "There are currently %d clients and %d frames. Exit anyway?" (- (length server-clients) 1) (- (length (frame-list)) 2))))

      ; If the user quits during the save dialog then don't exit emacs.
      ; Still close the terminal though.
      (let((inhibit-quit t))
             ; Save buffers
	(with-local-quit
	  (save-some-buffers))

	(if quit-flag
	  (setq quit-flag nil)
          ; Kill all remaining clients
	  (progn
	    (dolist (client server-clients)
	      (server-delete-client client))
		 ; Exit emacs
	    (kill-emacs)))
	))

    ; If we made a frame then kill it.
    (when (or modified-buffers active-clients-or-frames) (delete-frame new-frame))
    )
  )


(defun modified-buffers-exist()
  "This function will check to see if there are any buffers
that have been modified.  It will return true if there are
and nil otherwise. Buffers that have buffer-offer-save set to
nil are ignored."
  (let (modified-found)
    (dolist (buffer (buffer-list))
      (when (and (buffer-live-p buffer)
		 (buffer-modified-p buffer)
		 (not (buffer-base-buffer buffer))
		 (or
		  (buffer-file-name buffer)
		  (progn
		    (set-buffer buffer)
		    (and buffer-offer-save (> (buffer-size) 0))))
		 )
	(setq modified-found t)
	)
      )
    modified-found
    )
  )
#+END_SRC

* UI Preferences
** Tweak UI chrome

Hides menu bar, tool bar, and scrollbar

#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode -1)
#+END_SRC

Hide minibuffer scrollbar

#+BEGIN_SRC emacs-lisp
(set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC

** Use font ligatures

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

** Load a theme
#+BEGIN_SRC emacs-lisp
(use-package color-theme-sanityinc-tomorrow :ensure t)
#+END_SRC
** Use =moody= for a beautiful modeline

#+BEGIN_SRC emacs-lisp
(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))
#+END_SRC

** Use =minions= to hide minor modes

#+BEGIN_SRC emacs-lisp
(use-package minions
  :config
  (setq minions-mode-line-lighter ""
        minions-mode-line-delimiters '("" . ""))
  (minions-mode 1))
#+END_SRC

** Disable visual bell

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** Inhibit startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** Don't use dialog boxes
#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC
** Scroll conservatively

#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC

** Set default font

I've been really enjoying MSFT's new =Cascadia Code= font

#+BEGIN_SRC emacs-lisp
  (setq wp/default-font "Cascadia Code")
  (setq wp/default-font-size 9)
  (setq wp/current-font-size wp/default-font-size)

  (setq wp/font-change-increment 1.1)

  (defun wp/font-code ()
    "Return a string representing the current font (like \"Inconsolata-14\")."
    (concat wp/default-font "-" (number-to-string wp/current-font-size)))

  (defun wp/set-font-size ()
    "Set the font to `wp/default-font' at `wp/current-font-size'.
  Set that for the current frame, and also make it the default for
  other, future frames."
    (let ((font-code (wp/font-code)))
      (if (assoc 'font default-frame-alist)
          (setcdr (assoc 'font default-frame-alist) font-code)
        (add-to-list 'default-frame-alist (cons 'font font-code)))
      (set-frame-font font-code)))

  (defun wp/reset-font-size ()
    "Change font size back to `wp/default-font-size'."
    (interactive)
    (setq wp/current-font-size wp/default-font-size)
    (wp/set-font-size))

  (defun wp/increase-font-size ()
    "Increase current font size by a factor of `wp/font-change-increment'."
    (interactive)
    (setq wp/current-font-size
          (ceiling (* wp/current-font-size wp/font-change-increment)))
    (wp/set-font-size))

  (defun wp/decrease-font-size ()
    "Decrease current font size by a factor of `wp/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq wp/current-font-size
          (max 1
               (floor (/ wp/current-font-size wp/font-change-increment))))
    (wp/set-font-size))

  (define-key global-map (kbd "C-)") 'wp/reset-font-size)
  (define-key global-map (kbd "C-+") 'wp/increase-font-size)
  (define-key global-map (kbd "C-=") 'wp/increase-font-size)
  (define-key global-map (kbd "C-_") 'wp/decrease-font-size)
  (define-key global-map (kbd "C--") 'wp/decrease-font-size)

  (wp/reset-font-size)
#+END_SRC
** Display column position
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC
** Highlight current line

Softly highlight the background color of the line containing the point.

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC
** Highlight brackets
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-style 'mixed)
#+END_SRC
** Window Management

#+begin_src emacs-lisp
(defun vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))

(bind-key "C-x 2" 'vsplit-last-buffer)
(bind-key "C-x 3" 'hsplit-last-buffer)
#+end_src

* Miscellaneous Settings
** Visual Line Mode
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC
** Inhibit startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** Save/restore opened files and window config
#+BEGIN_SRC emacs-lisp
(desktop-change-dir "~/.emacs.desktop")
(desktop-save-mode 1) ; 0 to turn off
#+END_SRC
** Keep a list of recently opened files
#+BEGIN_SRC emacs-lisp
(recentf-mode 1)
#+END_SRC
** Use ido (Interactively DO) mode by default
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)

;; show any name that matches the characters typed
(setq ido-enable-flex-matching t)

;; use current pane when opening new files
(setq ido-default-file-method 'selected-window)

;; use current pane when switching buffers
(setq ido-default-buffer-method 'selected-window)

;; don't suggest when naming new files
(define-key (cdr ido-minor-mode-map-entry) [remap write-file] nil)

;; make minibuffer neight bigger to allow ido to show choices vertically
(setq max-mini-window-height 0.5)
#+END_SRC
** Separate customization file from =init.el=
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_SRC
** Send deleted items to recycle bin
#+BEGIN_SRC emacs-lisp
(setq delete-by-moving-to-trash t)
#+END_SRC
** Change backup location
#+begin_src emacs-lisp
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
#+end_src

** Set default web browser
#+BEGIN_SRC emacs-lisp
;; (setq browse-url-generic-program
;; (executable-find (getenv "BROWSER"))
;; browse-url-browser-function 'browse-url-generic)
#+END_SRC
** Fix =ediff= behavior
#+begin_src emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-split-window-function 'split-window-horizontally)
#+end_src

* Miscellaneous Utility Packages
** CSV Mode
#+BEGIN_SRC emacs-lisp
(use-package csv-mode)
#+END_SRC
** Tiny Menu
#+BEGIN_SRC emacs-lisp
(use-package tiny-menu
  :config
  (setq tiny-menu-items
      '(("buffer-menu" ("Buffer operations"
			((?k "Kill" kill-this-buffer "buffer-menu")
			 (?b "Bury" bury-buffer "root")
			 (?h "Goto help" nil "help-menu"))))
	("help-menu"   ("Help operations"
			((?f "Describe function" describe-function "quit")
			 (?k "Describe key"      describe-key))))
	("org-things"   ("Things"
                         ((?t "Tag"     org-tags-view)
                          (?i "ID"      cm-org-goto-custom-id)
                          (?k "Keyword" org-search-view))))
        ("org-links"    ("Links"
                         ((?c "Capture"   org-store-link)
                          (?l "Insert"    org-insert-link)
                          (?i "Custom ID" cm-org-insert-custom-id-link))))))

(setq tiny-menu-forever nil))
#+END_SRC
* Helm
** Basic configuration
#+BEGIN_SRC emacs-lisp
(use-package helm
  :config
  (require 'helm)
  (require 'helm-config))
  (when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
  helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
  helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
  helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
  helm-ff-file-name-history-use-recentf t
  helm-echo-input-in-header-line t)


  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 20)
  (helm-autoresize-mode 1)

  (helm-mode 1)
#+END_SRC

** Key bindings

The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
Changed to "C-c h". Note: We must set "C-c h" globally, because we
cannot change `helm-command-prefix-key' once `helm-config' is loaded.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
(global-set-key (kbd "M-x") 'helm-M-x) ; use Helm for M-x
(global-set-key (kbd "M-y") 'helm-show-kill-ring) ; use Helm for kill ring
(global-set-key (kbd "C-x b") 'helm-mini) ; use Helm to navigate buffers/recentf
(global-set-key (kbd "C-x C-f") 'helm-find-files) ; use Helm to find files
(global-set-key (kbd "C-c h o") 'helm-occur) ; use Helm for occurences in current buffer
(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings) ; use Helm to view all mark rings
(global-set-key (kbd "C-c h g") 'helm-google-suggest) ; Google Search

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
#+END_SRC
* Org Mode

** Basic Configuration

Set org file location to =~/org= and define default notes file

#+begin_src emacs-lisp
(setq org-directory "~/org/")
(setq org-default-notes-file (concat org-directory "/refile.org"))
#+end_src

Set Agenda Files Location

#+begin_src emacs-lisp
(setq org-agenda-file-regexp "\\`\\\([^.].*\\.org\\\|[0-9]\\\{8\\\}\\\(\\.gpg\\\)?\\\)\\'")
(setq org-agenda-files '("~/org"))
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :config
  (require 'org-tempo)
)
#+END_SRC

Make initial scratch buffer default to Org mode:

#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
#+END_SRC

Make =C-a= and =C-e= jump to beginning/end of headline text

#+begin_src emacs-lisp
(setq org-special-ctrl-a/e t)
#+end_src

Insert blank line before new heading or plain text list item

#+begin_src emacs-lisp
(setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))
#+end_src

#+begin_src emacs-lisp
(require 'org-super-agenda)
(require 'org-journal)
;;(setq org-agenda-files '("~/org")
#+end_src

*** Keybindings

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "<f12>") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c b") 'org-switchb)
#+end_src

** Refile Settings

Start targets with file name to allow creating level 1 tasks

#+begin_src emacs-lisp
(setq org-refile-targets '((org-agenda-files :maxlevel . 4)
                           (nil :maxlevel . 4))
      ;; Targets start with the file name - allows creating level 1 tasks
      org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil
      org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

File new notes and refile new TODOs at top instead of bottom

#+begin_src emacs-lisp
(setq org-reverse-note-order t)
#+end_src

** =TODO= Settings

Set TODO keywords
keys mentioned in brackets are hot-keys for the states
! indicates insert timestamp
@ indicates insert note
/ indicates entering the state

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t!/!)" "WORKING(w!/!)"
                  "|" "DONE(d!/@)")
        (sequence "FOLLOWUP(f!/!)" "WAITING(a@/!)"
                  "|" "DELEGATED(e@/!)")
        (sequence "PROJECT(p)" "REDO(R@/!)"
                  "|" "SOMEDAY(S)" "CANCELLED(c@/!)"
                  "RESTRUCTURED(r@/!)")))

(setq org-todo-keyword-faces
      '(("TODO" :foreground "red" :weight bold)
        ("WORKING" :foreground "orange" :weight bold)
        ("WAITING" :foreground "lightblue" :weight bold)
        ("REDO" :foreground "magenta" :weight bold)
        ("DONE" :foreground "SeaGreen4" :weight bold)
        ("DELEGATED" :foreground "SeaGreen4" :weight bold)
        ("PROJECT" :foreground "light slate blue" :weight bold)
        ("FOLLOWUP" :foreground "IndianRed4" :weight bold)
        ("SOMEDAY" :foreground "magenta" :weight bold)
        ("CANCELLED" :foreground "SeaGreen4" :weight bold)
        ("RESTRUCTURED" :foreground "SeaGreen4" :weight bold)))

;; Changing State should trigger following Tag changes
(setq org-todo-state-tags-triggers
      '(("SOMEDAY"
         ("waiting" . t) ("next" . nil))
        (done
         ("next" . nil) ("waiting" . nil) ("followup" . nil))
        ("WAITING"
         ("next" . nil) ("waiting" . t))
        ("TODO"
         ("waiting" . nil) ("followup" . nil))
        ("FOLLOWUP"
         ("followup" . t))
        ("WORKING"
         ("waiting" . nil) ("next" . t))))

#+end_src

Use fast =TODO= selection

#+begin_src emacs-lisp
(setq org-use-fast-todo-selection t)
#+end_src

Allow state changes without logging

#+begin_src emacs-lisp
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src

Include all entries in subtree in =TODO= statistics

#+begin_src emacs-lisp
(setq org-hierarchical-todo-statistics nil)
(setq org-hierarchical-checkbox-statistics nil)
#+end_src

Enforce TODO dependencies

#+begin_src emacs-lisp
(setq org-enforce-todo-dependencies t)
#+end_src

List of TODO states to clock-in to automatically

#+begin_src emacs-lisp
(setq vm/todo-list '("TODO" "WAITING" "REDO"))
#+end_src

#+begin_src emacs-lisp
(setq org-clock-in-switch-to-state 'wp/clock-in-to-working)
#+end_src

** Display Preferences

Use pretty bullets for outline

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :init
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

Use a fancy downward arrow instead of ellipsis when there is stuff under a collapsed header

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Make TAB in source blocks act like it would in a language's major mode

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
#+end_src

Use current window when editing a code snippet

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

Quick insert elisp blocks

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+END_SRC

** Task and =org-capture= management

Require notes when rescheduling or changing deadline for entries

#+begin_src emacs-lisp
(setq org-log-reschedule 'note)
(setq org-log-redeadline 'note)
#+end_src

*** Clock and timestamp settings

 #+begin_src emacs-lisp
 (setq org-clock-history-length 20)
 (setq org-clock-in-resume t)
 (setq org-clock-out-when-done t)
 (setq org-clock-persist t)
 (setq org-clock-persist-file (concat org-directory "/org-clock-save"))
 (setq org-clock-auto-clock-resolution 'when-no-clock-is-running)
 (setq org-clock-report-include-clocking-tast t)
 #+end_src

 Include timestamp when tasks are marked as done

#+begin_src emacs-lisp
(setq org-log-done (quote time))
#+end_src

*** Capture Templates

 Create new =org-journal= entry, note, or linklog

 #+begin_src emacs-lisp
 (setq org-capture-templates '(
			       ("j" "Journal entry" entry
				(function org-journal-find-location)
				"* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
			       ("t" "TODO" entry
				(file org-default-notes-file)
				"* TODO %?
 %U
 %a
  %i")
			       ("n" "note" entry
				(file+headline org-default-notes-file "Notes")
				"* %? :note:
 %U
 %a
  %i")
			       ("l" "linklog" entry
				(file
				 (concat org-directory "/linklog.org"))
				"* [[%c][%? ]] :linklog:
 %U
 ")))
 #+end_src

** Org-Journal

Use =org-journal= to keep track of my daily life

#+begin_src emacs-lisp
(use-package org-journal
    :ensure t
    :bind
    (("C-c j"   . 'org-journal-new-entry))
    :init
    (setq org-journal-dir "~/org/")
    (setq org-extend-today-until 0)
    (setq org-journal-file-type 'monthly)
    (setq org-journal-date-format "%a, %F")
    ;; (global-set-key (kbd "C-c C-j") 'org-journal-new-entry)
)
#+end_src

Enable agenda integration

#+begin_src emacs-lisp
(setq org-journal-enable-agenda-integration t)
#+end_src

Define items to carry over

#+begin_src emacs-lisp
(setq org-journal-carryover-items "TODO=\"TODO\"|TODO=\"WORKING\"|TODO=\"FOLLOWUP\"|TODO=\"WAITING\"")
#+end_src

Allow iCalendar eport

#+begin_src emacs-lisp
(setq org-icalendar-store-UID t)
(setq org-icalendar-include-todo "all")
(setq org-icalendar-combined-agenda-file "~/org/journal/org-journal.ics")
#+end_src

** Org Super Agenda

Main configuration

#+begin_src emacs-lisp
(use-package org-super-agenda
  :ensure t
  :init
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-agenda-include-deadlines t)
    (setq org-agenda-block-separator nil)
    (setq org-agenda-compact-blocks t)
    (setq org-agenda-start-day nil) ;; i.e. today
    (setq org-agenda-span 'day)
    (setq org-agenda-start-on-weekday 1)
    (setq org-agenda-custom-commands
        '(("c" "Super view"
           ((agenda "" ((org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:name "Today"
                                  :time-grid t
                                  :date today
                                  :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:log t)
                            (:name "To refile"
                                   :file-path "refile\\.org")
                            (:name "Next to do"
                                   :todo "NEXT"
                                   :order 1)
                            (:name "Important"
                                   :priority "A"
                                   :order 6)
                            (:name "Today's tasks"
                                   :file-path "journal/")
                            (:name "Due Today"
                                   :deadline today
                                   :order 2)
                            (:name "Scheduled/Due Soon"
                                   :scheduled future
				   :deadline future
                                   :order 8)
                            (:name "Overdue"
                                   :deadline past
                                   :order 7)
                            (:name "Meetings"
                                   :and (:todo "MEET" :scheduled future)
                                   :order 10)
                            (:discard (:not (:todo ("TODO" "FOLLOWUP" "WAITING"))))))))))))
  :config
  (org-super-agenda-mode))
#+end_src
